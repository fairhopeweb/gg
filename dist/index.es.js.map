{"version":3,"file":"index.es.js","sources":["../src/Archetype.ts","../src/Component.ts","../src/Entity.ts","../src/EntityManager.ts","../src/System.ts","../src/World.ts"],"sourcesContent":["import { ComponentOf, ComponentTypes } from './Component'\nimport { Entity } from './Entity'\n\nexport type ArchetypeComponentFilter<C extends ComponentTypes> = (\n  ...componentTypes: (keyof C)[]\n) => ArchetypeFilterPredicate<C>\n\nexport type ArchetypeFilterPredicate<C extends ComponentTypes> = (\n  entity: Entity<C>\n) => boolean\n\nexport type ArchetypeChangeEventTypes = 'add' | 'remove'\n\nexport interface ArchetypeChangeEvent<C extends ComponentTypes> {\n  type: ArchetypeChangeEventTypes\n  archetype: Archetype<C>\n  entity: Entity<C>\n  component: ComponentOf<C> | undefined\n}\n\nexport type ArchetypeChangeListener<C extends ComponentTypes> = (\n  ev: ArchetypeChangeEvent<C>\n) => void\n\ninterface ArchetypeComponentFilterPresets<C extends ComponentTypes> {\n  include: ArchetypeComponentFilter<C>\n  exclude: ArchetypeComponentFilter<C>\n  only: ArchetypeComponentFilter<C>\n  any: ArchetypeComponentFilter<C>\n}\n\nexport abstract class Archetype<C extends ComponentTypes>\n  implements ArchetypeComponentFilterPresets<C>\n{\n  include: ArchetypeComponentFilter<C> =\n    (...componentTypes: (keyof C)[]) =>\n    (entity: Entity<C>) =>\n      entity.hasComponents(...componentTypes)\n\n  exclude: ArchetypeComponentFilter<C> =\n    (...componentTypes: (keyof C)[]) =>\n    (entity: Entity<C>) =>\n      componentTypes.every((type) => !entity.hasComponent(type))\n\n  only: ArchetypeComponentFilter<C> =\n    (...componentTypes: (keyof C)[]) =>\n    (entity: Entity<C>) =>\n      componentTypes.length === entity.componentTypes.length &&\n      entity.hasComponents(...componentTypes)\n\n  any: ArchetypeComponentFilter<C> =\n    (...componentTypes: (keyof C)[]) =>\n    (entity: Entity<C>) =>\n      componentTypes.some((type) => entity.hasComponent(type))\n\n  filters: ArchetypeFilterPredicate<C>[] = []\n\n  readonly entities: Entity<C>[] = []\n\n  private onChangeListeners: Set<ArchetypeChangeListener<C>> = new Set()\n  private onAddListeners: Set<ArchetypeChangeListener<C>> = new Set()\n  private onRemoveListeners: Set<ArchetypeChangeListener<C>> = new Set()\n\n  onChange(listener: ArchetypeChangeListener<C>) {\n    this.onChangeListeners.add(listener)\n    return () => this.onChangeListeners.delete(listener)\n  }\n\n  onAdd(listener: ArchetypeChangeListener<C>) {\n    this.onAddListeners.add(listener)\n    return () => this.onAddListeners.delete(listener)\n  }\n\n  onRemove(listener: ArchetypeChangeListener<C>) {\n    this.onRemoveListeners.add(listener)\n    return () => this.onRemoveListeners.delete(listener)\n  }\n\n  matchesEntity(entity: Entity<C>): boolean {\n    return this.filters.every((filter) => filter(entity))\n  }\n\n  hasEntity(entity: Entity<C>): boolean {\n    return this.entities.indexOf(entity) !== -1\n  }\n\n  handleEntityChange(entity: Entity<C>, component?: ComponentOf<C>) {\n    if (this.hasEntity(entity)) {\n      // Does this entity need to be removed\n      if (!this.matchesEntity(entity)) {\n        this.handleEntityRemove(entity, component)\n      }\n    } else {\n      // Does this entity need to be added\n      if (this.matchesEntity(entity)) {\n        this.handleEntityAdd(entity, component)\n      }\n    }\n  }\n\n  handleEntityAdd(entity: Entity<C>, component?: ComponentOf<C>) {\n    if (this.matchesEntity(entity)) {\n      if (!this.hasEntity(entity)) {\n        const ev: ArchetypeChangeEvent<C> = {\n          type: 'add',\n          archetype: this,\n          entity,\n          component,\n        }\n\n        this.entities.push(entity)\n\n        for (const listener of this.onAddListeners) {\n          listener(ev)\n        }\n\n        for (const listener of this.onChangeListeners) {\n          listener(ev)\n        }\n      }\n    }\n  }\n\n  handleEntityRemove(entity: Entity<C>, component?: ComponentOf<C>) {\n    if (this.hasEntity(entity)) {\n      const idx = this.entities.indexOf(entity)\n\n      if (idx !== -1) {\n        const ev: ArchetypeChangeEvent<C> = {\n          type: 'remove',\n          archetype: this,\n          entity,\n          component,\n        }\n\n        this.entities.splice(idx, 1)\n\n        for (const listener of this.onRemoveListeners) {\n          listener(ev)\n        }\n\n        for (const listener of this.onChangeListeners) {\n          listener(ev)\n        }\n      }\n    }\n  }\n}\n","import { Entity } from './Entity'\n\n// export type FilterComponents<C> = Pick<\n//   C,\n//   {\n//     [K in keyof C]: C[K] extends Component<any> ? K : never\n//   }[keyof C]\n// >\n// export type ComponentKeyOf<C> = keyof FilterComponents<C>\n// export type ComponentOf<C> = FilterComponents<C>[keyof FilterComponents<C>]\n// export type ComponentKeyOf<C> = {\n//   [K in keyof C]: C[K] extends Component<any> ? K : never\n// }[keyof C]\n// export type ComponentOf<C> = {\n//   [K in keyof C]: C[K] extends Component<any> ? C[K] : never\n// }[keyof C]\n\nexport type ComponentKeyOf<C> = keyof C\nexport type ComponentOf<C> = C[keyof C]\n\nconst ComponentTypeRegExp = /Component$/\nexport function getComponentTypeFromClass(klass: any): string {\n  const name = klass.name\n  const noUnderscoreName = name.replace(/^_?/, '')\n  return (\n    noUnderscoreName.charAt(0).toLowerCase() +\n    noUnderscoreName.slice(1).replace(ComponentTypeRegExp, '')\n  )\n}\n\nexport abstract class Component<T> {\n  readonly type: string = getComponentTypeFromClass(this.constructor)\n\n  constructor(public value: T) {}\n\n  onAttach(_entity: Entity<any>) {\n    // stub\n  }\n\n  onDetach(_entity: Entity<any>) {\n    // stub\n  }\n}\n\nexport type ComponentTypes = Record<string, Component<any>>\n","import {\n  getComponentTypeFromClass,\n  ComponentOf,\n  ComponentTypes,\n} from './Component'\n\nexport type EntityChangeEventTypes = 'add' | 'remove'\n\nexport interface EntityChangeEvent<C extends ComponentTypes> {\n  type: EntityChangeEventTypes\n  entity: Entity<C>\n  component: ComponentOf<C>\n}\n\nexport type EntityChangeListener<C extends ComponentTypes> = (\n  ev: EntityChangeEvent<C>\n) => void\n\nconst UNDEFINED_ID = -1\n\nlet instanceIdx = 0\n\n/**\n * Entity is a container for components.\n */\nexport class Entity<C extends ComponentTypes> {\n  id: number = UNDEFINED_ID\n  components: Partial<C> = {}\n\n  /** List of components */\n  get componentTypes(): (keyof C)[] {\n    return Object.keys(this.components)\n  }\n\n  private onChangeListeners: Set<EntityChangeListener<C>> = new Set()\n\n  constructor(components: ComponentOf<C>[] = []) {\n    this.reset()\n    this.addComponents(components)\n  }\n\n  /**\n   * Reset the entity to its initial state\n   */\n  reset(): Entity<C> {\n    for (const type of this.componentTypes.reverse()) {\n      this.removeComponent(type)\n    }\n    this.id = ++instanceIdx\n    this.onChangeListeners = new Set()\n    return this\n  }\n\n  /**\n   * Clone an Entity\n   */\n  clone(): Entity<C> {\n    return new Entity<C>(Object.values(this.components))\n  }\n\n  /**\n   * Attach an onChange listener to the entity\n   */\n  onChange(listener: EntityChangeListener<C>) {\n    this.onChangeListeners.add(listener)\n    return () => this.onChangeListeners.delete(listener)\n  }\n\n  /**\n   * Remove an onChange listener from the entity\n   */\n  removeOnChange(listener: EntityChangeListener<C>) {\n    if (this.onChangeListeners.has(listener)) {\n      this.onChangeListeners.delete(listener)\n    }\n  }\n\n  /**\n   * Check if the entity has a component\n   */\n  hasComponent(type: keyof C): boolean {\n    return !!this.components[type]\n  }\n\n  // tslint:disable-next-line\n  has = this.hasComponent\n\n  /**\n   * Check if the entity has multiple components\n   */\n  hasComponents = (...types: (keyof C)[]): boolean => {\n    return types.every((type) => this.hasComponent(type))\n  }\n\n  /**\n   * Add a component to the entity\n   */\n  addComponent = (component: ComponentOf<C>) => {\n    if (this.hasComponent(component.type)) {\n      throw new Error(\n        `Entity already contains component of type ${component.type}.`\n      )\n    }\n\n    this.components[component.type as keyof C] = component\n\n    component.onAttach(this)\n\n    for (const listener of this.onChangeListeners) {\n      listener({ type: 'add', entity: this, component })\n    }\n  }\n\n  // tslint:disable-next-line\n  add = this.addComponent\n\n  /**\n   * Add multiple components to the entity\n   */\n  addComponents = (components: ComponentOf<C>[]) => {\n    for (const component of components) {\n      this.addComponent(component)\n    }\n  }\n\n  /**\n   * Remove a component from the entity\n   */\n  removeComponent = (type: keyof C) => {\n    if (this.hasComponent(type)) {\n      const component = this.components[type]!\n\n      delete this.components[type]\n\n      component.onDetach(this)\n\n      for (const listener of this.onChangeListeners) {\n        listener({ type: 'remove', entity: this, component })\n      }\n    }\n  }\n\n  // tslint:disable-next-line\n  remove = this.removeComponent\n\n  /**\n   * Add or remove a component based on a predicated value\n   */\n  toggleComponent(\n    componentClass: new (value: void) => ComponentOf<C>,\n    predicate: boolean\n  ) {\n    const componentType = getComponentTypeFromClass(componentClass)\n\n    if (predicate) {\n      // Only add the component if it doesn't exist. Avoid throwing\n      if (!this.hasComponent(componentType)) {\n        this.addComponent(new componentClass())\n      }\n    } else {\n      this.removeComponent(componentType)\n    }\n  }\n\n  // tslint:disable-next-line\n  toggle = this.toggleComponent\n\n  /**\n   * Get the component on the entity\n   */\n  getComponent<T extends keyof C>(type: T): C[T] | undefined {\n    return this.components[type]\n  }\n\n  /**\n   * Get the value of the component on the entity\n   */\n  getComponentValue<T extends keyof C>(type: T): C[T]['value'] {\n    if (!this.hasComponent(type)) {\n      throw new Error(\n        `Entity does not contain component of type ${String(type)}.`\n      )\n    }\n\n    return this.components[type]!.value\n  }\n\n  // tslint:disable-next-line\n  get = this.getComponentValue\n\n  /**\n   * Set the value of the component on the entity\n   */\n  setComponentValue<T extends keyof C>(\n    type: T,\n    value: Partial<C[T]['value']> | C[T]['value']\n  ) {\n    if (!this.hasComponent(type)) {\n      throw new Error(\n        `Entity does not contain component of type ${String(type)}.`\n      )\n    }\n\n    if (typeof value === 'object' && !Array.isArray(value)) {\n      Object.assign(this.components[type]!.value, value)\n    } else {\n      this.components[type]!.value = value\n    }\n  }\n\n  // tslint:disable-next-line\n  set = this.setComponentValue\n}\n","import { Archetype } from './Archetype'\nimport { ComponentOf, ComponentTypes } from './Component'\nimport { Entity } from './Entity'\n\nexport class EntityManager<C extends ComponentTypes> {\n  entities: Map<number, Entity<C>> = new Map()\n  archetypes: Map<string, Archetype<C>> = new Map()\n  entityChangeDisposers: Map<number, () => void> = new Map()\n\n  /**\n   * Filter entities by component types\n   */\n  filter(types: string[]): Entity<C>[] {\n    return Array.from(this.entities.values()).filter((entity) =>\n      entity.hasComponents(...types)\n    )\n  }\n\n  /**\n   * Add an entity to the manager\n   */\n  addEntity(entity: Entity<C>) {\n    if (!this.hasEntity(entity.id)) {\n      this.entities.set(entity.id, entity)\n\n      // Add entity listener\n      this.entityChangeDisposers.set(\n        entity.id,\n        entity.onChange((ev) => {\n          const { type, entity, component } = ev\n          switch (type) {\n            case 'add':\n              this.handleEntityAddComponent(entity, component)\n              break\n\n            case 'remove':\n              this.handleEntityRemoveComponent(entity, component)\n          }\n        })\n      )\n\n      // Add entity to archetypes\n      for (const archetype of this.archetypes.values()) {\n        archetype.handleEntityAdd(entity)\n      }\n    }\n  }\n\n  /**\n   * Remove an entity from the manager\n   */\n  removeEntity(entity: Entity<C>) {\n    if (this.hasEntity(entity.id)) {\n      this.entities.delete(entity.id)\n\n      // clean up entity listener disposers\n      if (this.entityChangeDisposers.has(entity.id)) {\n        this.entityChangeDisposers.get(entity.id)!()\n        this.entityChangeDisposers.delete(entity.id)\n      }\n\n      // Remove entity from archetypes\n      for (const archetype of this.archetypes.values()) {\n        archetype.handleEntityRemove(entity)\n      }\n\n      entity.reset()\n    }\n  }\n  /**\n   * Check if the manager has an entity\n   */\n  hasEntity(entityId: number): boolean {\n    return this.entities.has(entityId)\n  }\n\n  /**\n   * Get an entity from the manager\n   */\n  getEntity(entityId: number): Entity<C> | undefined {\n    return this.entities.get(entityId)\n  }\n\n  /**\n   * Create a new entity and add it to the manager\n   */\n  createEntity(components: ComponentOf<C>[] = []): Entity<C> {\n    const entity = new Entity<C>(components)\n    this.addEntity(entity)\n\n    return entity\n  }\n\n  /**\n   * Add an archetype to the manager\n   */\n  addArchetype<T extends Archetype<C>>(klass: new (...args: any[]) => T) {\n    const type = klass.name\n\n    if (this.archetypes.has(type)) {\n      throw new Error(\n        `EntityManager: Could not add archetype as '${type}' already exists.`\n      )\n    }\n\n    const archetype = new klass()\n    this.archetypes.set(type, archetype)\n\n    // Add matching entities to archetypes\n    for (const entity of this.entities.values()) {\n      archetype.handleEntityAdd(entity)\n    }\n\n    return archetype\n  }\n\n  /**\n   * Remove an archetype from the manager\n   */\n  removeArchetype<T extends Archetype<C>>(\n    klass: new (...args: any[]) => T\n  ): Archetype<C> {\n    const archetype = this.archetypes.get(klass.name)\n\n    if (!archetype) {\n      throw new Error(\n        `EntityManager: Could not delete archetype as '${klass.name}' does not exists.`\n      )\n    }\n\n    this.archetypes.delete(klass.name)\n\n    return archetype\n  }\n\n  /**\n   * Check if the manager has an archetype\n   */\n  hasArchetype<T extends Archetype<C>>(\n    klass: new (...args: any[]) => T\n  ): boolean {\n    return this.archetypes.has(klass.name)\n  }\n\n  /**\n   * Get an archetype from the manager\n   */\n  getArchetype<T extends Archetype<C>>(klass: new (...args: any[]) => T): T {\n    const archetype = this.archetypes.get(klass.name)\n\n    if (!archetype) {\n      throw new Error(\n        `EntityManager: Could not get archetype as '${klass.name}' does not exists.`\n      )\n    }\n\n    return archetype as T\n  }\n\n  /**\n   * Handle entity add component event\n   */\n  private handleEntityAddComponent(\n    entity: Entity<C>,\n    component: ComponentOf<C>\n  ) {\n    if (this.hasEntity(entity.id)) {\n      for (const archetype of this.archetypes.values()) {\n        archetype.handleEntityChange(entity, component)\n      }\n    }\n  }\n\n  /**\n   * Handle entity remove component event\n   */\n  private handleEntityRemoveComponent(\n    entity: Entity<C>,\n    component: ComponentOf<C>\n  ) {\n    if (this.hasEntity(entity.id)) {\n      for (const archetype of this.archetypes.values()) {\n        archetype.handleEntityChange(entity, component)\n      }\n    }\n  }\n}\n","import { ComponentTypes } from './Component'\nimport { EntityManager } from './EntityManager'\n\ninterface SystemOptions {\n  priority: number\n  enabled: boolean\n}\n\nexport abstract class System<C extends ComponentTypes> {\n  enabled: boolean = true\n\n  constructor(options: Partial<SystemOptions> = {}) {\n    Object.assign(this, options)\n  }\n\n  init(_: EntityManager<C>): void {\n    // stub\n  }\n\n  abstract update(manager: EntityManager<C>, dt: number, time: number): void\n\n  enable() {\n    this.enabled = true\n  }\n\n  disable() {\n    this.enabled = false\n  }\n}\n","import { Archetype } from './Archetype'\nimport { ComponentOf, ComponentTypes } from './Component'\nimport { Entity } from './Entity'\nimport { EntityManager } from './EntityManager'\nimport { System } from './System'\n\ninterface WorldOptions {}\n\n/**\n * World registers systems, archetypes and entities. Updates systems.\n */\nexport class World<C extends ComponentTypes> {\n  readonly manager: EntityManager<C> = new EntityManager<C>()\n\n  private systems: Map<string, System<C>> = new Map()\n\n  constructor(public readonly options: WorldOptions = {}) {\n    this.manager = new EntityManager<C>()\n  }\n\n  /** List of systems */\n  get systemTypes(): string[] {\n    return Array.from(this.systems.keys())\n  }\n\n  /**\n   * Add a system to the world and initialize it\n   */\n  addSystem(system: System<C>) {\n    const type = system.constructor.name\n\n    if (this.systems.has(type)) {\n      throw new Error(\n        `World: Could not add system as '${type}' already exists.`\n      )\n    }\n\n    this.systems.set(type, system)\n    system.init(this.manager)\n  }\n\n  /**\n   * Add multiple systems to the world\n   */\n  addSystems(...systems: System<C>[]) {\n    for (const system of systems) {\n      this.addSystem(system)\n    }\n  }\n\n  /**\n   * Remove a system from the world\n   */\n  removeSystem<T extends System<C>>(\n    klass: new (...args: any[]) => T\n  ): System<C> {\n    const system = this.getSystem(klass)\n\n    if (!system) {\n      throw new Error(\n        `World: Could not delete system as '${klass.name}' does not exist.`\n      )\n    }\n\n    this.systems.delete(klass.name)\n    return system\n  }\n\n  /**\n   * Check if a system exists in the world\n   */\n  hasSystem<T extends System<C>>(klass: new (...args: any[]) => T): boolean {\n    return this.systems.has(klass.name)\n  }\n\n  /**\n   * Get a system from the world\n   */\n  getSystem<T extends System<C>>(klass: new (...args: any[]) => T): T {\n    const system = this.systems.get(klass.name)\n\n    if (!system) {\n      throw new Error(\n        `World: Could not get system as '${klass.name}' does not exists.`\n      )\n    }\n\n    return system as T\n  }\n\n  /**\n   * Add an archetype to the world\n   */\n  addArchetype<T extends Archetype<C>>(klass: new (...args: any[]) => T) {\n    return this.manager.addArchetype(klass)\n  }\n\n  /**\n   * Remove an archetype from the world\n   */\n  removeArchetype<T extends Archetype<C>>(klass: new (...args: any[]) => T) {\n    return this.manager.removeArchetype(klass)\n  }\n\n  /**\n   * Check if an archetype exists in the world\n   */\n  hasArchetype<T extends Archetype<C>>(\n    klass: new (...args: any[]) => T\n  ): boolean {\n    return this.manager.hasArchetype(klass)\n  }\n\n  /**\n   * Get an archetype from the world\n   */\n  getArchetype<T extends Archetype<C>>(klass: new (...args: any[]) => T): T {\n    return this.manager.getArchetype(klass)\n  }\n\n  /**\n   * Create a new entity\n   */\n  createEntity(components: ComponentOf<C>[] = []): Entity<C> {\n    return this.manager.createEntity(components)\n  }\n\n  /**\n   * Remove an entity from the world\n   */\n  removeEntity(entityId: number) {\n    const entity = this.getEntity(entityId)\n\n    if (entity) {\n      this.manager.removeEntity(entity)\n    }\n  }\n\n  /**\n   * Get an entity from the world\n   */\n  getEntity = (entityId: number): Entity<C> | undefined => {\n    return this.manager.getEntity(entityId)\n  }\n\n  /**\n   * Get multiple entities from the world\n   */\n  getEntities(entityIds: number[]): (Entity<C> | undefined)[] {\n    return entityIds.map(this.getEntity)\n  }\n\n  /**\n   * Update all systems\n   */\n  update(dt: number, time: number) {\n    for (const system of this.systems.values()) {\n      if (system.enabled) {\n        system.update(this.manager, dt, time)\n      }\n    }\n  }\n}\n"],"names":["entity"],"mappings":";;;;;;AA+BO,MAAe,UAEtB;AAAA,EAFO;AAGL,mCACE,IAAI,mBACJ,CAAC,WACC,OAAO,cAAc,GAAG,cAAc;AAE1C,mCACE,IAAI,mBACJ,CAAC,WACC,eAAe,MAAM,CAAC,SAAS,CAAC,OAAO,aAAa,IAAI,CAAC;AAE7D,gCACE,IAAI,mBACJ,CAAC,WACC,eAAe,WAAW,OAAO,eAAe,UAChD,OAAO,cAAc,GAAG,cAAc;AAE1C,+BACE,IAAI,mBACJ,CAAC,WACC,eAAe,KAAK,CAAC,SAAS,OAAO,aAAa,IAAI,CAAC;AAE3D,mCAAyC,CAAA;AAEhC,oCAAwB,CAAA;AAEzB,iEAAyD;AACzD,8DAAsD;AACtD,iEAAyD;;EAEjE,SAAS,UAAsC;AACxC,SAAA,kBAAkB,IAAI,QAAQ;AACnC,WAAO,MAAM,KAAK,kBAAkB,OAAO,QAAQ;AAAA,EACrD;AAAA,EAEA,MAAM,UAAsC;AACrC,SAAA,eAAe,IAAI,QAAQ;AAChC,WAAO,MAAM,KAAK,eAAe,OAAO,QAAQ;AAAA,EAClD;AAAA,EAEA,SAAS,UAAsC;AACxC,SAAA,kBAAkB,IAAI,QAAQ;AACnC,WAAO,MAAM,KAAK,kBAAkB,OAAO,QAAQ;AAAA,EACrD;AAAA,EAEA,cAAc,QAA4B;AACxC,WAAO,KAAK,QAAQ,MAAM,CAAC,WAAW,OAAO,MAAM,CAAC;AAAA,EACtD;AAAA,EAEA,UAAU,QAA4B;AACpC,WAAO,KAAK,SAAS,QAAQ,MAAM,MAAM;AAAA,EAC3C;AAAA,EAEA,mBAAmB,QAAmB,WAA4B;AAC5D,QAAA,KAAK,UAAU,MAAM,GAAG;AAE1B,UAAI,CAAC,KAAK,cAAc,MAAM,GAAG;AAC1B,aAAA,mBAAmB,QAAQ,SAAS;AAAA,MAC3C;AAAA,IAAA,OACK;AAED,UAAA,KAAK,cAAc,MAAM,GAAG;AACzB,aAAA,gBAAgB,QAAQ,SAAS;AAAA,MACxC;AAAA,IACF;AAAA,EACF;AAAA,EAEA,gBAAgB,QAAmB,WAA4B;AACzD,QAAA,KAAK,cAAc,MAAM,GAAG;AAC9B,UAAI,CAAC,KAAK,UAAU,MAAM,GAAG;AAC3B,cAAM,KAA8B;AAAA,UAClC,MAAM;AAAA,UACN,WAAW;AAAA,UACX;AAAA,UACA;AAAA,QAAA;AAGG,aAAA,SAAS,KAAK,MAAM;AAEd,mBAAA,YAAY,KAAK,gBAAgB;AAC1C,mBAAS,EAAE;AAAA,QACb;AAEW,mBAAA,YAAY,KAAK,mBAAmB;AAC7C,mBAAS,EAAE;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,mBAAmB,QAAmB,WAA4B;AAC5D,QAAA,KAAK,UAAU,MAAM,GAAG;AAC1B,YAAM,MAAM,KAAK,SAAS,QAAQ,MAAM;AAExC,UAAI,QAAQ,IAAI;AACd,cAAM,KAA8B;AAAA,UAClC,MAAM;AAAA,UACN,WAAW;AAAA,UACX;AAAA,UACA;AAAA,QAAA;AAGG,aAAA,SAAS,OAAO,KAAK,CAAC;AAEhB,mBAAA,YAAY,KAAK,mBAAmB;AAC7C,mBAAS,EAAE;AAAA,QACb;AAEW,mBAAA,YAAY,KAAK,mBAAmB;AAC7C,mBAAS,EAAE;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AC/HA,MAAM,sBAAsB;AACrB,SAAS,0BAA0B,OAAoB;AAC5D,QAAM,OAAO,MAAM;AACnB,QAAM,mBAAmB,KAAK,QAAQ,OAAO,EAAE;AAC/C,SACE,iBAAiB,OAAO,CAAC,EAAE,YAAY,IACvC,iBAAiB,MAAM,CAAC,EAAE,QAAQ,qBAAqB,EAAE;AAE7D;AAEO,MAAe,UAAa;AAAA,EAGjC,YAAmB,OAAU;AAFpB,gCAAe,0BAA0B,KAAK,WAAW;AAE/C,SAAA,QAAA;AAAA,EAAW;AAAA,EAE9B,SAAS,SAAsB;AAAA,EAE/B;AAAA,EAEA,SAAS,SAAsB;AAAA,EAE/B;AACF;ACxBA,MAAM,eAAe;AAErB,IAAI,cAAc;AAKX,MAAM,OAAiC;AAAA,EAW5C,YAAY,aAA+B,IAAI;AAV/C,8BAAa;AACb,sCAAyB,CAAA;AAOjB,iEAAsD;AAmD9D;AAAA,+BAAM,KAAK;AAKX;AAAA;AAAA;AAAA,yCAAgB,IAAI,UAAgC;AAClD,aAAO,MAAM,MAAM,CAAC,SAAS,KAAK,aAAa,IAAI,CAAC;AAAA,IAAA;AAMtD;AAAA;AAAA;AAAA,wCAAe,CAAC,cAA8B;AAC5C,UAAI,KAAK,aAAa,UAAU,IAAI,GAAG;AACrC,cAAM,IAAI;AAAA,UACR,6CAA6C,UAAU,IAAI;AAAA,QAAA;AAAA,MAE/D;AAEK,WAAA,WAAW,UAAU,IAAe,IAAI;AAE7C,gBAAU,SAAS,IAAI;AAEZ,iBAAA,YAAY,KAAK,mBAAmB;AAC7C,iBAAS,EAAE,MAAM,OAAO,QAAQ,MAAM,WAAW;AAAA,MACnD;AAAA,IAAA;AAIF;AAAA,+BAAM,KAAK;AAKX;AAAA;AAAA;AAAA,yCAAgB,CAAC,eAAiC;AAChD,iBAAW,aAAa,YAAY;AAClC,aAAK,aAAa,SAAS;AAAA,MAC7B;AAAA,IAAA;AAMF;AAAA;AAAA;AAAA,2CAAkB,CAAC,SAAkB;AAC/B,UAAA,KAAK,aAAa,IAAI,GAAG;AACrB,cAAA,YAAY,KAAK,WAAW,IAAI;AAE/B,eAAA,KAAK,WAAW,IAAI;AAE3B,kBAAU,SAAS,IAAI;AAEZ,mBAAA,YAAY,KAAK,mBAAmB;AAC7C,mBAAS,EAAE,MAAM,UAAU,QAAQ,MAAM,WAAW;AAAA,QACtD;AAAA,MACF;AAAA,IAAA;AAIF;AAAA,kCAAS,KAAK;AAsBd;AAAA,kCAAS,KAAK;AAuBd;AAAA,+BAAM,KAAK;AAuBX;AAAA,+BAAM,KAAK;AA9KT,SAAK,MAAM;AACX,SAAK,cAAc,UAAU;AAAA,EAC/B;AAAA;AAAA,EATA,IAAI,iBAA8B;AACzB,WAAA,OAAO,KAAK,KAAK,UAAU;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAYA,QAAmB;AACjB,eAAW,QAAQ,KAAK,eAAe,QAAA,GAAW;AAChD,WAAK,gBAAgB,IAAI;AAAA,IAC3B;AACA,SAAK,KAAK,EAAE;AACP,SAAA,wCAAwB;AACtB,WAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,QAAmB;AACjB,WAAO,IAAI,OAAU,OAAO,OAAO,KAAK,UAAU,CAAC;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,UAAmC;AACrC,SAAA,kBAAkB,IAAI,QAAQ;AACnC,WAAO,MAAM,KAAK,kBAAkB,OAAO,QAAQ;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,UAAmC;AAChD,QAAI,KAAK,kBAAkB,IAAI,QAAQ,GAAG;AACnC,WAAA,kBAAkB,OAAO,QAAQ;AAAA,IACxC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,MAAwB;AACnC,WAAO,CAAC,CAAC,KAAK,WAAW,IAAI;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAkEA,gBACE,gBACA,WACA;AACM,UAAA,gBAAgB,0BAA0B,cAAc;AAE9D,QAAI,WAAW;AAEb,UAAI,CAAC,KAAK,aAAa,aAAa,GAAG;AAChC,aAAA,aAAa,IAAI,eAAA,CAAgB;AAAA,MACxC;AAAA,IAAA,OACK;AACL,WAAK,gBAAgB,aAAa;AAAA,IACpC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAQA,aAAgC,MAA2B;AAClD,WAAA,KAAK,WAAW,IAAI;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAqC,MAAwB;AAC3D,QAAI,CAAC,KAAK,aAAa,IAAI,GAAG;AAC5B,YAAM,IAAI;AAAA,QACR,6CAA6C,OAAO,IAAI,CAAC;AAAA,MAAA;AAAA,IAE7D;AAEO,WAAA,KAAK,WAAW,IAAI,EAAG;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA,EAQA,kBACE,MACA,OACA;AACA,QAAI,CAAC,KAAK,aAAa,IAAI,GAAG;AAC5B,YAAM,IAAI;AAAA,QACR,6CAA6C,OAAO,IAAI,CAAC;AAAA,MAAA;AAAA,IAE7D;AAEA,QAAI,OAAO,UAAU,YAAY,CAAC,MAAM,QAAQ,KAAK,GAAG;AACtD,aAAO,OAAO,KAAK,WAAW,IAAI,EAAG,OAAO,KAAK;AAAA,IAAA,OAC5C;AACA,WAAA,WAAW,IAAI,EAAG,QAAQ;AAAA,IACjC;AAAA,EACF;AAIF;AChNO,MAAM,cAAwC;AAAA,EAA9C;AACL,wDAAuC;AACvC,0DAA4C;AAC5C,qEAAqD;;;;;EAKrD,OAAO,OAA8B;AACnC,WAAO,MAAM,KAAK,KAAK,SAAS,OAAQ,CAAA,EAAE;AAAA,MAAO,CAAC,WAChD,OAAO,cAAc,GAAG,KAAK;AAAA,IAAA;AAAA,EAEjC;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,QAAmB;AAC3B,QAAI,CAAC,KAAK,UAAU,OAAO,EAAE,GAAG;AAC9B,WAAK,SAAS,IAAI,OAAO,IAAI,MAAM;AAGnC,WAAK,sBAAsB;AAAA,QACzB,OAAO;AAAA,QACP,OAAO,SAAS,CAAC,OAAO;AACtB,gBAAM,EAAE,MAAM,QAAAA,SAAQ,cAAc;AACpC,kBAAQ,MAAM;AAAA,YACZ,KAAK;AACE,mBAAA,yBAAyBA,SAAQ,SAAS;AAC/C;AAAA,YAEF,KAAK;AACE,mBAAA,4BAA4BA,SAAQ,SAAS;AAAA,UACtD;AAAA,QAAA,CACD;AAAA,MAAA;AAIH,iBAAW,aAAa,KAAK,WAAW,OAAA,GAAU;AAChD,kBAAU,gBAAgB,MAAM;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,QAAmB;AAC9B,QAAI,KAAK,UAAU,OAAO,EAAE,GAAG;AACxB,WAAA,SAAS,OAAO,OAAO,EAAE;AAG9B,UAAI,KAAK,sBAAsB,IAAI,OAAO,EAAE,GAAG;AAC7C,aAAK,sBAAsB,IAAI,OAAO,EAAE,EAAG;AACtC,aAAA,sBAAsB,OAAO,OAAO,EAAE;AAAA,MAC7C;AAGA,iBAAW,aAAa,KAAK,WAAW,OAAA,GAAU;AAChD,kBAAU,mBAAmB,MAAM;AAAA,MACrC;AAEA,aAAO,MAAM;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU,UAA2B;AAC5B,WAAA,KAAK,SAAS,IAAI,QAAQ;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,UAAyC;AAC1C,WAAA,KAAK,SAAS,IAAI,QAAQ;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,aAA+B,IAAe;AACnD,UAAA,SAAS,IAAI,OAAU,UAAU;AACvC,SAAK,UAAU,MAAM;AAEd,WAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAqC,OAAkC;AACrE,UAAM,OAAO,MAAM;AAEnB,QAAI,KAAK,WAAW,IAAI,IAAI,GAAG;AAC7B,YAAM,IAAI;AAAA,QACR,8CAA8C,IAAI;AAAA,MAAA;AAAA,IAEtD;AAEM,UAAA,YAAY,IAAI;AACjB,SAAA,WAAW,IAAI,MAAM,SAAS;AAGnC,eAAW,UAAU,KAAK,SAAS,OAAA,GAAU;AAC3C,gBAAU,gBAAgB,MAAM;AAAA,IAClC;AAEO,WAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,gBACE,OACc;AACd,UAAM,YAAY,KAAK,WAAW,IAAI,MAAM,IAAI;AAEhD,QAAI,CAAC,WAAW;AACd,YAAM,IAAI;AAAA,QACR,iDAAiD,MAAM,IAAI;AAAA,MAAA;AAAA,IAE/D;AAEK,SAAA,WAAW,OAAO,MAAM,IAAI;AAE1B,WAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aACE,OACS;AACT,WAAO,KAAK,WAAW,IAAI,MAAM,IAAI;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAqC,OAAqC;AACxE,UAAM,YAAY,KAAK,WAAW,IAAI,MAAM,IAAI;AAEhD,QAAI,CAAC,WAAW;AACd,YAAM,IAAI;AAAA,QACR,8CAA8C,MAAM,IAAI;AAAA,MAAA;AAAA,IAE5D;AAEO,WAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKQ,yBACN,QACA,WACA;AACA,QAAI,KAAK,UAAU,OAAO,EAAE,GAAG;AAC7B,iBAAW,aAAa,KAAK,WAAW,OAAA,GAAU;AACtC,kBAAA,mBAAmB,QAAQ,SAAS;AAAA,MAChD;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,4BACN,QACA,WACA;AACA,QAAI,KAAK,UAAU,OAAO,EAAE,GAAG;AAC7B,iBAAW,aAAa,KAAK,WAAW,OAAA,GAAU;AACtC,kBAAA,mBAAmB,QAAQ,SAAS;AAAA,MAChD;AAAA,IACF;AAAA,EACF;AACF;AClLO,MAAe,OAAiC;AAAA,EAGrD,YAAY,UAAkC,IAAI;AAFlD,mCAAmB;AAGV,WAAA,OAAO,MAAM,OAAO;AAAA,EAC7B;AAAA,EAEA,KAAK,GAA2B;AAAA,EAEhC;AAAA,EAIA,SAAS;AACP,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,UAAU;AACR,SAAK,UAAU;AAAA,EACjB;AACF;ACjBO,MAAM,MAAgC;AAAA,EAK3C,YAA4B,UAAwB,IAAI;AAJ/C,mCAA4B,IAAI;AAEjC,uDAAsC;AA+H9C;AAAA;AAAA;AAAA,qCAAY,CAAC,aAA4C;AAChD,aAAA,KAAK,QAAQ,UAAU,QAAQ;AAAA,IAAA;AA9HZ,SAAA,UAAA;AACrB,SAAA,UAAU,IAAI;EACrB;AAAA;AAAA,EAGA,IAAI,cAAwB;AAC1B,WAAO,MAAM,KAAK,KAAK,QAAQ,KAAM,CAAA;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,QAAmB;AACrB,UAAA,OAAO,OAAO,YAAY;AAEhC,QAAI,KAAK,QAAQ,IAAI,IAAI,GAAG;AAC1B,YAAM,IAAI;AAAA,QACR,mCAAmC,IAAI;AAAA,MAAA;AAAA,IAE3C;AAEK,SAAA,QAAQ,IAAI,MAAM,MAAM;AACtB,WAAA,KAAK,KAAK,OAAO;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,SAAsB;AAClC,eAAW,UAAU,SAAS;AAC5B,WAAK,UAAU,MAAM;AAAA,IACvB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,aACE,OACW;AACL,UAAA,SAAS,KAAK,UAAU,KAAK;AAEnC,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR,sCAAsC,MAAM,IAAI;AAAA,MAAA;AAAA,IAEpD;AAEK,SAAA,QAAQ,OAAO,MAAM,IAAI;AACvB,WAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,UAA+B,OAA2C;AACxE,WAAO,KAAK,QAAQ,IAAI,MAAM,IAAI;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,UAA+B,OAAqC;AAClE,UAAM,SAAS,KAAK,QAAQ,IAAI,MAAM,IAAI;AAE1C,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR,mCAAmC,MAAM,IAAI;AAAA,MAAA;AAAA,IAEjD;AAEO,WAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAqC,OAAkC;AAC9D,WAAA,KAAK,QAAQ,aAAa,KAAK;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAwC,OAAkC;AACjE,WAAA,KAAK,QAAQ,gBAAgB,KAAK;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKA,aACE,OACS;AACF,WAAA,KAAK,QAAQ,aAAa,KAAK;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAqC,OAAqC;AACjE,WAAA,KAAK,QAAQ,aAAa,KAAK;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,aAA+B,IAAe;AAClD,WAAA,KAAK,QAAQ,aAAa,UAAU;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,UAAkB;AACvB,UAAA,SAAS,KAAK,UAAU,QAAQ;AAEtC,QAAI,QAAQ;AACL,WAAA,QAAQ,aAAa,MAAM;AAAA,IAClC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAYA,YAAY,WAAgD;AACnD,WAAA,UAAU,IAAI,KAAK,SAAS;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,IAAY,MAAc;AAC/B,eAAW,UAAU,KAAK,QAAQ,OAAA,GAAU;AAC1C,UAAI,OAAO,SAAS;AAClB,eAAO,OAAO,KAAK,SAAS,IAAI,IAAI;AAAA,MACtC;AAAA,IACF;AAAA,EACF;AACF;"}